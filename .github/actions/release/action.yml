name: "Version Bump and Release"
description: "Bumps the version, creates a tag, and optionally creates a GitHub release"

inputs:
  draft:
    description: "Set the release as a draft"
    required: false
    default: "true"
  prerelease:
    description: "Mark the release as a pre-release"
    required: false
    default: "true"
  azure_openai_endpoint:
    description: "Azure OpenAI endpoint (required)"
    required: true
  deployment_name:
    description: "Azure OpenAI deployment name (optional)"
    default: gpt-4o
    required: false
  azure_openai_key:
    description: "Azure OpenAI key (optional if using managed identity)"
    required: false
  azure_client_id:
    description: "Azure Client ID for OIDC federation"
    required: false
  azure_tenant_id:
    description: "Azure Tenant ID for OIDC federation"
    required: false
  azure_subscription_id:
    description: "Azure Subscription ID for OIDC federation"
    required: false
  api_version:
    description: "Azure OpenAI API version"
    required: false
    default: "2024-02-15-preview"
  temperature:
    description: "Temperature for text generation (0.0-2.0)"
    required: false
    default: "0.2"
  max_tokens:
    description: "Maximum number of tokens in the response"
    required: false
    default: "4096"
  top_p:
    description: >-
      Controls diversity of language model output. Lower values (e.g., 0.1) make responses more focused and deterministic,
      while higher values (e.g., 0.9) allow more diverse and creative responses. Default 1.0 uses standard sampling.
    required: false
    default: "1.0"
  frequency_penalty:
    description: >-
      Reduces word repetition by penalizing tokens based on their frequency in the text. Positive values decrease
      repetition and encourage exploration of new topics, while negative values may increase focus on key themes.
      Range: -2.0 (may increase repetition) to 2.0 (strongly discourages repetition).
    required: false
    default: "0.0"
  presence_penalty:
    description: >-
      Influences topic diversity by penalizing tokens that have appeared at all in the text. Positive values encourage
      the model to discuss new topics, while negative values increase focus on existing topics. Range: -2.0 (may
      increase focus on existing topics) to 2.0 (strongly encourages new topics).
    required: false
    default: "0.0"
  response_format:
    description: "Response format (text or json_object)"
    required: false
    default: "text"
  seed:
    description: "Random number seed for deterministic outputs"
    required: false
    default: ""
  release_prefix:
    description: "Prefix for release titles"
    required: false
    default: "Release"
  validate_version_history:
    description: "Enable version history validation"
    required: false
    default: "true"

runs:
  using: "composite"
  steps:
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '23.2.0'

    - name: Install dependencies
      run: npm install semver
      shell: bash

    - name: Azure login
      uses: azure/login@v1
      if: "!inputs.azure_openai_key"
      with:
        client-id: ${{ inputs.azure_client_id }}
        tenant-id: ${{ inputs.azure_tenant_id }}
        subscription-id: ${{ inputs.azure_subscription_id }}

    - name: Set up Git
      shell: bash
      env:
        GIT_USER_NAME: "github-actions[bot]"
        GIT_USER_EMAIL: "github-actions[bot]@users.noreply.github.com"
      run: |
        git config --global user.name "$GIT_USER_NAME"
        git config --global user.email "$GIT_USER_EMAIL"

    - name: Get the latest tag
      id: get_tag
      shell: bash
      run: |
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
        echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

    - name: Validate and Determine New Version
      id: validate_version
      shell: bash
      if: inputs.validate_version_history == 'true'
      run: |
        set -e
        if ! git describe --tags --abbrev=0 2>/dev/null; then
          echo "No tags found - creating first version"
          new_tag="v0.1.0"
          echo "version=$new_tag" >> $GITHUB_OUTPUT
          exit 0
        fi

        base_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
        echo "Derived from tag: $base_tag"
        
        major=$(echo $base_tag | awk -F. '{print substr($1, 2)}')
        minor=$(echo $base_tag | awk -F. '{print $2}')
        patch=$(echo $base_tag | awk -F. '{print $3}')
        
        latest_patch_tag=$(git tag --sort=-v:refname | grep "^v$major.$minor." | head -n 1 || echo "")
        latest_minor_tag=$(git tag --sort=-v:refname | grep "^v$major." | head -n 1 || echo "")
        latest_tag=$(git tag --sort=-v:refname | head -n 1 || echo "")
        
        commit_message=$(echo "${{ github.event.head_commit.message }}" | tr '[:upper:]' '[:lower:]')
        if [[ "$commit_message" == *"feat"* || "$commit_message" == *"minor"* ]]; then
          bump_type="minor"
        elif [[ "$commit_message" == *"fix"* || "$commit_message" == *"patch"* ]]; then
          bump_type="patch"
        elif [[ "$commit_message" == *"breaking change"* || "$commit_message" == *"major"* ]]; then
          bump_type="major"
        else
          bump_type="patch"
        fi
        
        if [[ "$bump_type" == "patch" && -n "$latest_patch_tag" && "$base_tag" != "$latest_patch_tag" ]]; then
          echo "Error: HEAD is not derived from the latest patch tag ($latest_patch_tag)."
          exit 1
        elif [[ "$bump_type" == "minor" && -n "$latest_minor_tag" && "$base_tag" != "$latest_minor_tag" ]]; then
          echo "Error: HEAD is not derived from the latest minor tag ($latest_minor_tag)."
          exit 1
        elif [[ "$bump_type" == "major" && -n "$latest_tag" && "$base_tag" != "$latest_tag" ]]; then
          echo "Error: HEAD is not derived from the latest tag ($latest_tag)."
          exit 1
        fi
        
        if [[ "$bump_type" == "patch" ]]; then
          new_tag="v$major.$minor.$((patch + 1))"
        elif [[ "$bump_type" == "minor" ]]; then
          new_tag="v$major.$((minor + 1)).0"
        elif [[ "$bump_type" == "major" ]]; then
          new_tag="v$((major + 1)).0.0"
        fi
        
        echo "version=$new_tag" >> $GITHUB_OUTPUT
    - name: Tag new version
      shell: bash
      run: |
        set -e
        git tag -a "${{ steps.validate_version.outputs.version }}" -m "Release ${{ steps.validate_version.outputs.version }}"
        git push origin "${{ steps.validate_version.outputs.version }}"

    - name: Generate Release Notes
      id: release_notes
      shell: bash
      env:
        AZURE_OPENAI_ENDPOINT: ${{ inputs.azure_openai_endpoint }}
        AZURE_OPENAI_KEY: ${{ inputs.azure_openai_key }}
        DEPLOYMENT_NAME: ${{ inputs.deployment_name }}
        API_VERSION: ${{ inputs.api_version }}
        TEMPERATURE: ${{ inputs.temperature }}
        MAX_TOKENS: ${{ inputs.max_tokens }}
        TOP_P: ${{ inputs.top_p }}
        FREQUENCY_PENALTY: ${{ inputs.frequency_penalty }}
        PRESENCE_PENALTY: ${{ inputs.presence_penalty }}
        RESPONSE_FORMAT: ${{ inputs.response_format }}
        SEED: ${{ inputs.seed }}
      run: |
        # Fixed auth logic
        if [ -n "$AZURE_OPENAI_KEY" ] && [ "$AZURE_OPENAI_KEY" != "" ]; then
          auth_header="api-key: $AZURE_OPENAI_KEY"
        else
          token=$(az account get-access-token --resource https://cognitiveservices.azure.com/ --query accessToken -o tsv)
          auth_header="Authorization: Bearer $token"
        fi

        git_diff=$(git diff $(git describe --tags --abbrev=0)..HEAD)
        commit_messages=$(git log $(git describe --tags --abbrev=0)..HEAD --oneline)
        pr_titles=$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"%s" --grep "Merge pull request")

        request_body="{
          \"messages\": [
            {
              \"role\": \"system\",
              \"content\": \"You are a professional technical writer specializing in generating concise and consistent release notes.\"
            },
            {
              \"role\": \"user\",
              \"content\": \"Generate release notes for the latest software update. Include:\n1. A title with the release version.\n2. A summary of key changes.\n3. Sections for New Features, Bug Fixes, and Improvements.\n4. A closing note thanking contributors.\n\nVersion details:\n- Latest version: $(git describe --tags)\n- Previous version: $(git describe --tags --abbrev=0)\n- Git diff summary: $git_diff\n- Commit messages: $commit_messages\n- PR titles: $pr_titles\"
            }
          ],
          \"temperature\": $TEMPERATURE,
          \"max_tokens\": $MAX_TOKENS,
          \"top_p\": $TOP_P,
          \"frequency_penalty\": $FREQUENCY_PENALTY,
          \"presence_penalty\": $PRESENCE_PENALTY"

        if [ -n "$RESPONSE_FORMAT" ] && [ "$RESPONSE_FORMAT" != "text" ]; then
          request_body="$request_body, \"response_format\": {\"type\": \"$RESPONSE_FORMAT\"}"
        fi
        
        if [ -n "$SEED" ]; then
          request_body="$request_body, \"seed\": $SEED"
        fi

        request_body="$request_body }"

        curl -s -X POST "$AZURE_OPENAI_ENDPOINT/openai/deployments/$DEPLOYMENT_NAME/chat/completions?api-version=$API_VERSION" \
        -H "Content-Type: application/json" \
        -H "$auth_header" \
        -d "$request_body" > release_notes.json

        cat release_notes.json | jq -r '.choices[0].messages[0].content' > release_notes.md

    - name: Create GitHub Release
      shell: bash
      env:
        RELEASE_PREFIX: ${{ inputs.release_prefix }}
      run: |
        release_body=$(cat release_notes.md | jq -Rsa .)
        curl -s -X POST "https://api.github.com/repos/${{ github.repository }}/releases" \
        -H "Authorization: token $GITHUB_TOKEN" \
        -H "Content-Type: application/json" \
        -d "{
          \"tag_name\": \"${{ steps.validate_version.outputs.version }}\",
          \"name\": \"$RELEASE_PREFIX ${{ steps.validate_version.outputs.version }}\",
          \"body\": $release_body,
          \"draft\": ${{ inputs.draft }},
          \"prerelease\": ${{ inputs.prerelease }}
        }"